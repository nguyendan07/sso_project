"""
Django settings for sso_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import configparser
import os
from pathlib import Path

import dj_database_url
# Load environment variables from .env file
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Config parser for backward compatibility
conf_parser = configparser.ConfigParser()
conf_parser.read(os.getenv('CONFIG_FILE', 'config.ini'))
file_config = conf_parser['DEFAULT']


def get_config(name, default=None):
    """Get configuration from environment variables, config file, or default."""
    # Priority: Environment Variable > Config File > Default
    return os.getenv(name, file_config.get(name, default))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = file_config.get(
    'SECRET_KEY',
    os.getenv(
        'SECRET_KEY',
        'django-insecure-$=!j=oulz6&@a+tv(ja)zqk(m_-jcmx47&lhc2d+@^)2sm#0uc',
    ),
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = get_config('ALLOWED_HOSTS', '*').split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'mozilla_django_oidc',  # OIDC authentication app
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'accounts',  # Custom app for user accounts
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sso_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sso_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_URL = get_config('DATABASE_URL', f'sqlite:///{BASE_DIR}/db.sqlite3')

db_config = dj_database_url.parse(DATABASE_URL)
db_config.update({'DISABLE_SERVER_SIDE_CURSORS': True})
DATABASES = {'default': db_config}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication
AUTHENTICATION_BACKENDS = (
    'accounts.auth.CustomOIDCAuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
)

AUTH_USER_MODEL = 'accounts.User'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", get_config('HTTP_X_FORWARDED_PROTO', 'https'))

# OIDC Settings
OIDC_RP_CLIENT_ID = get_config('OIDC_RP_CLIENT_ID', '')
OIDC_RP_CLIENT_SECRET = get_config('OIDC_RP_CLIENT_SECRET', '')
OIDC_OP_AUTHORIZATION_ENDPOINT = get_config('OIDC_OP_AUTHORIZATION_ENDPOINT', '')
OIDC_OP_TOKEN_ENDPOINT = get_config('OIDC_OP_TOKEN_ENDPOINT', '')
OIDC_OP_USER_ENDPOINT = get_config('OIDC_OP_USER_ENDPOINT', '')
OIDC_OP_JWKS_ENDPOINT = get_config('OIDC_OP_JWKS_ENDPOINT', '')
OIDC_RP_SIGN_ALGO = get_config('OIDC_RP_SIGN_ALGO', 'RS256')
OIDC_RP_SCOPES = get_config('OIDC_RP_SCOPES', 'openid email profile')
